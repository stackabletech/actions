---
name: Build Product Image
description: This action builds a product container image with a specific version
inputs:
  product-name:
    description: The name of the product to build via boil (directory name)
    required: true
  product-version:
    description: The version of the product to build via boil
    required: true
  boil-version:
    description: The boil version
    default: latest
  boil-config-file:
    description: Path to the boil config file, defaults to `./boil.toml`
    default: ./boil.toml
  sdp-version:
    description: |
      Stackable Data Platform version (eg: `24.7.0`)
    default: 0.0.0-dev
  extra-tag-data:
    description: |
      Extra data to include in the final image manifest tag (eg: `pr321`)
  registry-namespace:
    description: Path of the registry namespace, eg. `sdp` or `stackable`
    required: true
outputs:
  image-manifest-tag:
    description: |
      Human-readable tag (usually the version) with architecture information,
      for example: `3.4.1-stackable0.0.0-dev-amd64`
    value: ${{ steps.image_info.outputs.IMAGE_MANIFEST_TAG }}
  suggested-image-index-manifest-tag:
    description: |
      Human-readable tag (usually the version) without architecture information,
      for example: `3.4.1-stackable0.0.0-dev`
    value: ${{ steps.image_info.outputs.IMAGE_INDEX_MANIFEST_TAG }}
runs:
  using: composite
  steps:
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Setup boil (${{ inputs.boil-version }})
      uses: stackabletech/actions/setup-tools@refactor/build-product-image-use-boil # TODO: Replace with latest released version
      with:
        boil-version: ${{ inputs.boil-version }}

    - name: Building ${{ inputs.product-name }} Container Image using boil
      env:
        REGISTRY_NAMESPACE: ${{ inputs.registry-namespace }}
        BOIL_PRODUCT_VERSION: ${{ inputs.product-version }}
        BOIL_CONFIG_FILE: ${{ inputs.boil-config-file }}
        IMAGE_REPOSITORY: ${{ inputs.product-name }}
        EXTRA_TAG_DATA: ${{ inputs.extra-tag-data }}
        SDP_VERSION: ${{ inputs.sdp-version }}
      shell: bash
      run: |
        set -euo pipefail
        IMAGE_ARCH=$("$GITHUB_ACTION_PATH/../.scripts/actions/get_architecture.sh")

        # Will be either:
        # - 3.9.2-stackable0.0.0-dev or
        # - 3.9.2-stackable0.0.0-dev-pr321
        IMAGE_INDEX_MANIFEST_TAG="${SDP_VERSION}${EXTRA_TAG_DATA:+-$EXTRA_TAG_DATA}"
        echo "IMAGE_INDEX_MANIFEST_TAG=$IMAGE_INDEX_MANIFEST_TAG" | tee -a "$GITHUB_ENV"

        # Validate that final tag is valid according to
        # https://github.com/distribution/reference/blob/8c942b0459dfdcc5b6685581dd0a5a470f615bff/regexp.go#L68
        if ! echo "$IMAGE_INDEX_MANIFEST_TAG" | grep --perl-regexp --quiet '^[\w][\w.-]{1,127}$'; then
          >&2 echo "Encountered invalid image manifest tag: $IMAGE_INDEX_MANIFEST_TAG"
          exit 1
        fi

        echo "::group::boil"
        boil build \
          --image-version "$IMAGE_INDEX_MANIFEST_TAG" \
          --registry-namespace "$REGISTRY_NAMESPACE" \
          --target-platform "linux/${IMAGE_ARCH}" \
          --configuration "$BOIL_CONFIG_FILE" \
          --write-image-manifest-uris \
          --use-localhost-registry \
          --load \
          "$IMAGE_REPOSITORY=$BOIL_PRODUCT_VERSION"
        echo "::endgroup::"

    - name: Extract Environment Variables
      id: image_info
      shell: bash
      run: |
        set -euo pipefail
        echo "boil-target-tags: "$(< boil-target-tags)

        # Extract the image manifest tag from the boil-target-tags file
        IMAGE_MANIFEST_TAG=$(cut -d : -f 2 < boil-target-tags)
        [[ -n "$IMAGE_MANIFEST_TAG" ]]
        [[ -n "$IMAGE_INDEX_MANIFEST_TAG" ]]

        # Add the contents of the env variables to the GitHub output, so that it
        # can be used as action outputs
        echo "IMAGE_MANIFEST_TAG=$IMAGE_MANIFEST_TAG" | tee -a "$GITHUB_OUTPUT"
        echo "IMAGE_INDEX_MANIFEST_TAG=$IMAGE_INDEX_MANIFEST_TAG" | tee -a "$GITHUB_OUTPUT"
