---
name: Run pre-commit
description: |
  This action sets up Python, the pre-commit tool, and additional tools
  required for various hooks. It then runs pre-commit against the changed files.
  This actions expects checkouts with depth 0.
inputs:
  python-version:
    description: Python version to install
    default: "3.12"
  pre-commit-version:
    description: Pre-commit version to install
    default: 4.2.0
  rust:
    description: Whether to install the Rust toolchain (and which version to use)
  rust-components:
    description: |
      Override which Rust components are installed. Only takes effect when Rust
      is installed.
    default: rustfmt,clippy
  hadolint:
    description: Whether to install hadolint (and which version to use)
  nix:
    description: Whether to install nix (and which version to use)
  nix-github-token:
    description: |
      The GitHub token is used by Nix to pull from GitHub with higher rate-limits. Required when
      the 'nix' input is used.
runs:
  using: composite
  steps:
    - name: Setup Python
      uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
      with:
        python-version: ${{ inputs.python-version }}
        # It doesn't make a whole lot of sense to use the pre-commit config file
        # as the dependency file, but the setup-python action looks for
        # requirements.txt and pyproject.toml by default, which are both not
        # present (in most cases). To override these two defaults, we need to
        # specify a different file. Specifying the pre-commit config at least
        # guarantees that the cache is invalidated if the config changes.
        # Ideally we want to invalidate when the pre-commit or Python version
        # changes, but that's not easily possible.
        cache-dependency-path: .pre-commit-config.yaml
        cache: 'pip'

    - name: Install pre-commit (${{ env.PRE_COMMIT_VERSION }})
      shell: bash
      env:
        PRE_COMMIT_VERSION: ${{ inputs.pre-commit-version }}
      run: |
        python -m pip install "pre-commit==$PRE_COMMIT_VERSION"

      # This caches downloaded pre-commit hook artifacts and results in faster
      # workflow runs after an initial hydration run with the exact same hooks
    - name: Setup pre-commit Cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ inputs.pre-commit-version }}-python${{ inputs.python-version }}-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Format Rust Toolchain Cache Key
      if: ${{ inputs.rust }}
      shell: bash
      env:
        RUST_COMPONENTS: ${{ inputs.rust-components }}
      run: |
        RUST_COMPONENTS=${RUST_COMPONENTS//,/_}
        echo "RUST_COMPONENTS=$RUST_COMPONENTS" | tee -a "$GITHUB_ENV"

    - name: Setup Rust Toolchain Cache
      id: rust-toolchain-cache
      if: ${{ inputs.rust }}
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ~/.rustup/toolchains
        key: rust-toolchains-${{ inputs.rust }}-components-${{ env.RUST_COMPONENTS }}

    - name: Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@56f84321dbccf38fb67ce29ab63e4754056677e0
      if: ${{ inputs.rust && steps.rust-toolchain-cache.outputs.cache-hit != 'true' }}
      with:
        toolchain: ${{ inputs.rust }}
        components: ${{ inputs.rust-components }}

    - name: Install Hadolint
      if: ${{ inputs.hadolint }}
      shell: bash
      env:
        HADOLINT_VERSION: ${{ inputs.hadolint }}
      run: |
        set -euo pipefail

        LOCATION_DIR="$HOME/.local/bin"
        LOCATION_BIN="$LOCATION_DIR/hadolint"

        SYSTEM=$(uname -s)
        ARCH=$(uname -m)

        mkdir -p "$LOCATION_DIR"
        curl -sL -o "$LOCATION_BIN" "https://github.com/hadolint/hadolint/releases/download/${HADOLINT_VERSION}/hadolint-$SYSTEM-$ARCH"
        chmod 700 "$LOCATION_BIN"

        echo "$LOCATION_DIR" | tee -a "$GITHUB_PATH"

    - name: Abort if nix-github-token input is not set
      if: inputs.nix && !inputs.nix-github-token
      shell: bash
      run: |
        echo "nix-github-token input must be set when nix input is set"
        exit 1

    - name: Setup nix
      if: inputs.nix
      uses: cachix/install-nix-action@08dcb3a5e62fa31e2da3d490afc4176ef55ecd72 #v30
      with:
        github_access_token: ${{ inputs.nix-github-token }}
        install_url: https://releases.nixos.org/nix/nix-${{ inputs.nix }}/install

    - name: Run pre-commit
      shell: bash
      env:
        BASE_SHA: ${{ github.event.pull_request.base.sha }}
        HEAD_SHA: ${{ github.event.pull_request.head.sha }}
      run: |
        pre-commit run --show-diff-on-failure --color always --from-ref "$BASE_SHA" --to-ref "$HEAD_SHA"
